@if (Timestamp.HasValue || ShowAlways)
{
    const string space = " ";
    var classes = $"timestamp-renderer {Class}";
    <MudText Typo="Typo.body2" Class="@classes" title="@HoverTitle">
        @* no spacing for now because it wraps on mobile and looks bad then *@
        <MudStack Row AlignItems="AlignItems.Baseline" Wrap="Wrap.Wrap" Spacing="0">
            @if (Prefix.HasContent())
            {
                <span class="prefix">@Prefix</span>
            }
            @if (TimestampChanged.HasDelegate)
            {
                <DateTimePicker @bind-Value="Ts"/>
            }
            else if (Timestamp.HasValue)
            {
                var ts = Ts.GetValueOrDefault();
                if (ts.Date != DateTime.Today)
                {
                    // only show date if it's not from today
                    @ts.ToString("ddd,")
                    @space
                    @ts.ToShortDateString()
                    @space
                }

                @ts.ToShortTimeString()
            }
        </MudStack>
    </MudText>
}

@code {

    [Parameter] public DateTime? Timestamp { get; set; }
    [Parameter] public string? Prefix { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? HoverTitle { get; set; }
    [Parameter] public bool ShowAlways { get; set; }
    [Parameter] public EventCallback<DateTime?> TimestampChanged { get; set; }

    private DateTime? Ts
    {
        get => Timestamp?.ToLocalTime();
        set
        {
            if (value == null)
            {
                Timestamp = null;
                TimestampChanged.InvokeAsync(null);
            }
            else
            {
                Timestamp = value.Value.ToUniversalTime();
                TimestampChanged.InvokeAsync(Timestamp.Value);
            }
        }
    }

}
<MudField Variant="Variant.Outlined" Class="flex-grow-0" InnerPadding="false" Margin="Margin.Dense">
    <input type="date"
           @bind="@DatePart"
           @bind:after="() => ValueChanged.InvokeAsync(Value)"
           class="date-time-picker mt-n1"
           style="outline: none"/>
    @* outline: none because it's already handled by MudField *@
    <input type="time"
           value="@TimePart"
           @onchange="HandleTimePartChanged"
           class="date-time-picker mt-n1 pl-2"
           style="outline: none"/>
    @* outline: none because it's already handled by MudField *@
</MudField>

@code {

    private DateTime? DatePart
    {
        get => Value?.Date;
        set
        {
            if (value == null)
            {
                Value = null;
            }
            else
            {
                var timePart = Value.GetValueOrDefault().TimeOfDay;
                Value = value.GetValueOrDefault().Date.Add(timePart);
            }
        }
    }

    private TimeSpan? TimePart
    {
        get
        {
            if (Value == null)
            {
                return null;
            }

            var ts = Value.GetValueOrDefault();
            if (ts.TimeOfDay == TimeSpan.Zero)
            {
                return null;
            }

            // only show time if it's not 00:00
            return new TimeSpan(ts.Hour, ts.Minute, ts.Second);
        }
        set
        {
            if (value == null)
            {
                Value = Value.GetValueOrDefault().Date;
            }
            else
            {
                var date = Value.GetValueOrDefault().Date;
                Value = date.Date.Add(value.GetValueOrDefault());
            }
        }
    }

    [Parameter] [EditorRequired] public DateTime? Value { get; set; }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }

    // needed because the built-in converter does not handle TimeSpan
    private async Task HandleTimePartChanged(ChangeEventArgs arg)
    {
        var asString = arg.Value?.ToString();
        if (!asString.HasContent())
        {
            TimePart = null;
        }
        else
        {
            TimePart = TimeSpan.Parse(asString);
        }

        await ValueChanged.InvokeAsync(Value);
    }

}
@using MudBlazor.Extensions
@inject IJSRuntime Js

@* hide not for some time *@
@* MudMenu is used as context menu *@
<MudMenu ActivationEvent="MouseEvent.RightClick"
         AnchorOrigin="Origin.TopRight"
         TransformOrigin="Origin.BottomRight"
         Dense="true">
    <ActivatorContent>
        @* the activator content represents the primary action *@
        @if (Note.IsHidden())
        {
            <MudIconButton Icon="@Icons.Material.Filled.Update"
                           Color="Color.Primary"
                           OnClick="HandleUnhide"
                           title="Clear hide duration"/>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Outlined.Update"
                           OnClick="() => HandleHide(TimeSpan.FromDays(1))"
                           title="Hide for 1d
or open context menu"/>
        }
    </ActivatorContent>
    <ChildContent>
        @* here we define the secondary action *@
        <MudMenuItem Class="hide-until-menu-item px-2">
            <MudStack Row Class="py-0" Spacing="0" AlignItems="AlignItems.Baseline">
                <MudMenuItem Class="px-3" Disabled Style="width: 75%" AutoClose="false">
                    Hide for:
                </MudMenuItem>
                <MudMenuItem Class="px-1 text-center" Style="width: 25%" AutoClose="false"
                             OnClick="HandleOpenDatePicker">
                    <MudIcon Icon="@Icons.Material.Outlined.EditCalendar"
                             Size="Size.Small"
                             Style="vertical-align: text-bottom">
                    </MudIcon>
                    <input type="date"
                           min="@DateTime.Today.AddDays(1).ToIsoDateString()"
                           class="kinda-hidden"
                           @ref="_dateInput"
                           @bind="@_datePickerDate"
                           @bind:after="HandleDatepicker"/>
                </MudMenuItem>
            </MudStack>
            <MudStack Row Class="py-0" Spacing="0">
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromHours(1))">1h</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromHours(2))">2h</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromHours(4))">4h</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromHours(8))">8h</MudMenuItem>
            </MudStack>
            <MudStack Row Class="py-0" Spacing="0">
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromDays(1))">1d</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromDays(2))">2d</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromDays(3))">3d</MudMenuItem>
                <MudMenuItem Class="px-3" OnClick="() => HandleHide(TimeSpan.FromDays(5))">5d</MudMenuItem>
            </MudStack>
        </MudMenuItem>
    </ChildContent>
</MudMenu>

@code {
    ElementReference _dateInput;
    DateTime _datePickerDate = DateTime.Today;

    [Parameter] public Note Note { get; set; }
    [Parameter] public EventCallback<TimeSpan> OnDurationSelected { get; set; }
    [Parameter] public EventCallback OnUnhideSelected { get; set; }

    protected override void OnInitialized()
    {
        _datePickerDate = Note.HiddenUntil.GetValueOrDefault().Date.Clamp(DateTime.Today, null);
        base.OnInitialized();
    }

    private Task HandleHide(TimeSpan dur)
    {
        // _picker.OpenAsync()
        return OnDurationSelected.InvokeAsync(dur);
    }

    private Task HandleUnhide()
    {
        return OnUnhideSelected.InvokeAsync();
    }

    private async Task HandleOpenDatePicker()
    {
        await Js.InvokeVoidAsync("showPicker", _dateInput);
    }

    private Task HandleDatepicker()
    {
        var diff = _datePickerDate - DateTime.Today;
        return OnDurationSelected.InvokeAsync(diff);
    }

}
@using Markdig
@{
    var cssClass = "note-card";
    var tags = Note.GetTags();
    cssClass += tags.Contains("#blur") ? " blurred-note" : "";
    cssClass += tags.Contains("#wide") ? " wide-note" : "";

    var renderAsMarkdown = tags.Contains("#md") || tags.Contains("#markdown");
}

@* tabindex="-1" makes it selectable but not "tabbable". So notes can be unblurred on mobile with clicking *@
<MudCard Elevation="3" @ondblclick="HandleDblClick" Class="@cssClass" tabindex="-1">
    <MudCardContent Class="note-card-text-width note-card-text-height"
                    Style="word-break: break-word">
        @if (renderAsMarkdown)
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseSoftlineBreakAsHardlineBreak()
                .UseTaskLists()
                .UseAutoLinks()
                .UseCitations()
                .UseEmphasisExtras()
                .Build();
            var html = Markdown.ToHtml(Note.GetXssSafeText(SearchQuery), pipeline);

            <div class="note-text-markdown">
                @(new MarkupString(html))
            </div>
        }
        else
        {
            <p style="white-space: pre-line" class="pb-0 note-text">
                @(new MarkupString(Note.GetXssSafeText(SearchQuery)))
            </p>
        }
    </MudCardContent>
    <MudCardActions>
        <MudStack Spacing="0">
            @if (Note.RelevantAt.HasValue)
            {
                <TimestampRenderer Timestamp="Note.RelevantAt" Class="ml-2" HoverTitle="Relevant"/>
            }
            else
            {
                <TimestampRenderer Timestamp="Note.CreatedAt" Class="ml-2" HoverTitle="Created"/>
            }
            @if (Note.DeletedAt.HasValue)
            {
                <TimestampRenderer Timestamp="Note.DeletedAt" Class="ml-2" HoverTitle="Trashed" Prefix="T:"/>
            }
            else
            {
                <TimestampRenderer Timestamp="Note.ArchivedAt" Class="ml-2" HoverTitle="Archived" Prefix="A:"/>
            }
        </MudStack>
        <MudSpacer/>

        <NoteCardHideForButton Note="Note"
                               OnDurationSelected="HandleHideForDurationSelected"
                               OnUnhideSelected="HandleUnhide"/>

        @* archive *@
        @* MudMenu is used as context menu *@
        <MudMenu ActivationEvent="MouseEvent.RightClick"
                 AnchorOrigin="Origin.TopRight"
                 TransformOrigin="Origin.BottomRight" Dense="true">
            <ActivatorContent>
                @* the activator content represents the primary action *@
                @if (Note.DeletedAt.HasValue)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.RestoreFromTrash"
                                   Color="Color.Primary"
                                   OnClick="HandleRestoreFromTrash"
                                   title="Restore from trash"/>
                }
                else if (Note.ArchivedAt.HasValue)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Unarchive"
                                   Color="Color.Primary"
                                   OnClick="HandleRestoreFromArchive"/>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Archive"
                                   OnClick="HandleArchive"/>
                }
            </ActivatorContent>
            <ChildContent>
                @* here we define the secondary action *@
                @if (Note.DeletedAt.HasValue)
                {
                    <MudMenuItem OnClick="HandleDeletePermanently"
                                 Icon="@Icons.Material.Filled.DeleteForever"
                                 IconColor="Color.Error">
                        <MudText Color="Color.Error">
                            Delete permanently!
                        </MudText>
                    </MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="HandleTrash"
                                 Icon="@Icons.Material.Filled.DeleteOutline"
                                 IconColor="Color.Warning">
                        <MudText Color="Color.Warning">
                            Trash
                        </MudText>
                    </MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                       OnClick="HandleClick"/>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] [EditorRequired] public required Note Note { get; set; }
    [Parameter] public BzSearchQuery? SearchQuery { get; set; }

    private void HandleClick()
    {
        Dispatch(new NoteActions.StartNoteEditingAction(Note));
    }

    private void HandleArchive()
    {
        Dispatch(new NoteActions.ArchiveNoteAction(Note.Id));
    }

    private void HandleRestoreFromArchive()
    {
        Dispatch(new NoteActions.RestoreNoteFromArchiveAction(Note.Id));
    }

    private void HandleTrash()
    {
        Dispatch(new NoteActions.TrashNoteAction(Note.Id));
    }

    private void HandleRestoreFromTrash()
    {
        Dispatch(new NoteActions.RestoreNoteFromTrashAction(Note.Id));
    }

    private void HandleDeletePermanently()
    {
        Dispatch(new NoteActions.DeleteNotePermanentlyAction(Note.Id));
    }

    private void HandleDblClick()
    {
        HandleClick();
    }

    private void HandleHideForDurationSelected(TimeSpan duration)
    {
        Dispatch(new NoteActions.HideForAction(Note.Id, duration));
    }

    private void HandleUnhide()
    {
        Dispatch(new NoteActions.UnhideAction(Note.Id));
    }

}
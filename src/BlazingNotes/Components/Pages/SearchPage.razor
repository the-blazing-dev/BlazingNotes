@page "/search"
@using BlazingNotes.Logic.Services
@inject IState<AppState> AppState

<PageTitle>Search</PageTitle>

<MudStack Spacing="6">
    <MudTextField @bind-Value="Query"
                  Variant="Variant.Outlined"
                  AutoFocus
                  Label="Search"
                  Immediate/>

    @{
        var all = AppState.Value.Notes;
        var (longEnough, highlightText, matches) = NoteSearcher.Search(all, Query ?? "");
        if (longEnough)
        {
            var nonArchiveMatches = matches.Where(x => x.ArchivedAt == null).ToList();
            var archiveMatches = matches.Where(x => x.ArchivedAt.HasValue).ToList();

            <NoteCardList Notes="nonArchiveMatches"
                          Headline="Suchergebnisse"
                          SearchText="@highlightText"/>

            @if (archiveMatches.HasContent())
            {
                <NoteCardList Notes="archiveMatches"
                              Headline="Archiviert"
                              SearchText="@highlightText"
                              InitiallyExpanded="false"/>
            }
        }
        else
        {
            <NoteCardList Notes="[]"
                          Headline="Suchergebnisse"
                          NoNotesText="Bitte einen Suchbegriff mit mindestens 3 Zeichen eingeben"/>
        }
    }
</MudStack>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? Query { get; set; }

}
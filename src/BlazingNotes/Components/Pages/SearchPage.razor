@page "/search"
@using System.Net
@using BlazingNotes.Logic.Services
@inject IState<AppState> AppState

<PageTitle>Search</PageTitle>

<MudStack Spacing="6">
    <MudTextField @bind-Value="Query"
                  Variant="Variant.Outlined"
                  AutoFocus
                  Label="Search"
                  Immediate/>

    @{
        // .ToList() could be a performance/memory issue somewhen
        var all = AppState.Value.GetSearchableNotes();
        if (NoteSearcher.IsSearchTermLongEnough(Query ?? ""))
        {
            <NoteCardListSeparated Notes="all" SearchText="@Query"/>
        }
        else
        {
            <NoteCardList Notes="[]"
                          Headline="Suchergebnisse"
                          NoNotesText="Bitte einen Suchbegriff mit mindestens 3 Zeichen eingeben"/>
        }
    }
</MudStack>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? Query { get; set; }

    public static string GetUrl(string query)
    {
        // url encoding is needed because #sometag would be the fragment part of a URI
        return $"/search?q={WebUtility.UrlEncode(query)}";
    }

}